
Traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000d32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f6  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6f  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d63  00000000  00000000  0000328d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e5  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c64  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000055dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  74:	0c 94 5d 06 	jmp	0xcba	; 0xcba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
u8 buttonStatus;
u8 bufferButtonStatus;

void app_init()
{
	LED_init(CARS_REDLED_PORT,CARS_REDLED_PIN);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_init>
	LED_init(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_init>
	LED_init(CARS_GREENLED_PORT,CARS_GREENLED_PIN);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_init>
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 9c 01 	call	0x338	; 0x338 <BUTTON_init>
	Delay_init();
  9c:	0e 94 a8 01 	call	0x350	; 0x350 <Delay_init>
  a0:	08 95       	ret

000000a2 <yellowsBlink>:
}

void yellowsBlink()
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	u32 counter=0;
	LED_on(PED_YELLOWLED_PORT,PED_YELLOWLED_PIN);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	LED_on(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	81 e4       	ldi	r24, 0x41	; 65
  b2:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	for(counter=0;counter<50;counter++)
  b6:	c0 e0       	ldi	r28, 0x00	; 0
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	22 c0       	rjmp	.+68     	; 0x100 <yellowsBlink+0x5e>
	{
		Delay_ms(100);
  bc:	84 e6       	ldi	r24, 0x64	; 100
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 ab 01 	call	0x356	; 0x356 <Delay_ms>
		if(counter%5==0 &&counter!=0)
  c4:	9e 01       	movw	r18, r28
  c6:	ad ec       	ldi	r26, 0xCD	; 205
  c8:	bc ec       	ldi	r27, 0xCC	; 204
  ca:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__umulhisi3>
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	96 95       	lsr	r25
  d4:	87 95       	ror	r24
  d6:	9c 01       	movw	r18, r24
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	82 0f       	add	r24, r18
  e2:	93 1f       	adc	r25, r19
  e4:	c8 17       	cp	r28, r24
  e6:	d9 07       	cpc	r29, r25
  e8:	51 f4       	brne	.+20     	; 0xfe <yellowsBlink+0x5c>
  ea:	20 97       	sbiw	r28, 0x00	; 0
  ec:	41 f0       	breq	.+16     	; 0xfe <yellowsBlink+0x5c>
		{
			LED_toggle(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 3b 02 	call	0x476	; 0x476 <LED_toggle>
			LED_toggle(PED_YELLOWLED_PORT,PED_YELLOWLED_PIN);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 3b 02 	call	0x476	; 0x476 <LED_toggle>
void yellowsBlink()
{
	u32 counter=0;
	LED_on(PED_YELLOWLED_PORT,PED_YELLOWLED_PIN);
	LED_on(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
	for(counter=0;counter<50;counter++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	c2 33       	cpi	r28, 0x32	; 50
 102:	d1 05       	cpc	r29, r1
 104:	d8 f2       	brcs	.-74     	; 0xbc <yellowsBlink+0x1a>
		{
			LED_toggle(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
			LED_toggle(PED_YELLOWLED_PORT,PED_YELLOWLED_PIN);
		}
	}
	LED_off(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	LED_off(PED_YELLOWLED_PORT,PED_YELLOWLED_PIN);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	82 e4       	ldi	r24, 0x42	; 66
 112:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <carsYelllowGreenCase>:

void carsYelllowGreenCase()
{
	LED_on(PED_REDLED_PORT,PED_REDLED_PIN);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	yellowsBlink();
 124:	0e 94 51 00 	call	0xa2	; 0xa2 <yellowsBlink>
	LED_off(PED_REDLED_PORT,PED_REDLED_PIN);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	82 e4       	ldi	r24, 0x42	; 66
 12c:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	LED_on(PED_GREENLED_PORT,PED_GREENLED_PIN);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	LED_off(CARS_GREENLED_PORT,CARS_GREENLED_PIN);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	LED_on(CARS_REDLED_PORT,CARS_REDLED_PIN);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	Delay_ms(5000);
 148:	88 e8       	ldi	r24, 0x88	; 136
 14a:	93 e1       	ldi	r25, 0x13	; 19
 14c:	0e 94 ab 01 	call	0x356	; 0x356 <Delay_ms>
 150:	08 95       	ret

00000152 <pedToNormalMode>:
}

void pedToNormalMode()
{
	LED_off(CARS_REDLED_PORT,CARS_REDLED_PIN);
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	yellowsBlink();
 15a:	0e 94 51 00 	call	0xa2	; 0xa2 <yellowsBlink>
	LED_off(PED_GREENLED_PORT,PED_GREENLED_PIN);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e4       	ldi	r24, 0x42	; 66
 162:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	LED_on(PED_REDLED_PORT,PED_REDLED_PIN);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	82 e4       	ldi	r24, 0x42	; 66
 16a:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
 16e:	08 95       	ret

00000170 <greenForCar>:
}

EN_APPFLOW_t greenForCar()
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	//}
	//green off
	/////////////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
	LED_on(CARS_GREENLED_PORT,CARS_GREENLED_PIN);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	for(counter=0;counter<500;counter++)
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	2b c0       	rjmp	.+86     	; 0x1d8 <greenForCar+0x68>
	{
		if(counter==150)
 182:	c6 39       	cpi	r28, 0x96	; 150
 184:	d1 05       	cpc	r29, r1
 186:	21 f4       	brne	.+8      	; 0x190 <greenForCar+0x20>
		{
			LED_off(PED_REDLED_PORT,PED_REDLED_PIN);
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
		}
		Delay_ms(10);
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 ab 01 	call	0x356	; 0x356 <Delay_ms>
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
 198:	40 e6       	ldi	r20, 0x60	; 96
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	84 e4       	ldi	r24, 0x44	; 68
 1a0:	0e 94 a0 01 	call	0x340	; 0x340 <BUTTON_read>
		buttonStatus=bufferButtonStatus;
 1a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <buttonStatus>
		while(bufferButtonStatus==HIGH)
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <greenForCar+0x4a>
		{
			BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
 1ae:	40 e6       	ldi	r20, 0x60	; 96
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	84 e4       	ldi	r24, 0x44	; 68
 1b6:	0e 94 a0 01 	call	0x340	; 0x340 <BUTTON_read>
			LED_off(PED_REDLED_PORT,PED_REDLED_PIN);
		}
		Delay_ms(10);
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
		buttonStatus=bufferButtonStatus;
		while(bufferButtonStatus==HIGH)
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	b1 f3       	breq	.-20     	; 0x1ae <greenForCar+0x3e>
		{
			BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
		}
		if(buttonStatus==HIGH)
 1c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonStatus>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	31 f4       	brne	.+12     	; 0x1d6 <greenForCar+0x66>
		{
			carsYelllowGreenCase();
 1ca:	0e 94 8e 00 	call	0x11c	; 0x11c <carsYelllowGreenCase>
			pedToNormalMode();
 1ce:	0e 94 a9 00 	call	0x152	; 0x152 <pedToNormalMode>
			appFLow=PED_SEQUENCE;
 1d2:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <greenForCar+0x72>
	//green off
	/////////////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
	LED_on(CARS_GREENLED_PORT,CARS_GREENLED_PIN);
	for(counter=0;counter<500;counter++)
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	c4 3f       	cpi	r28, 0xF4	; 244
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	d8 07       	cpc	r29, r24
 1de:	88 f2       	brcs	.-94     	; 0x182 <greenForCar+0x12>
	//}
	//}
	//green off
	/////////////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
			pedToNormalMode();
			appFLow=PED_SEQUENCE;
			break;
		}
	}
	LED_off(CARS_GREENLED_PORT,CARS_GREENLED_PIN);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	return appFLow;
}
 1ea:	8c 2f       	mov	r24, r28
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <yellowForCar>:
EN_APPFLOW_t yellowForCar()
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
	//}
	// yellow off
	/////////////////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
	LED_on(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	for(counter=0;counter<500;counter++)
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	3c c0       	rjmp	.+120    	; 0x27c <yellowForCar+0x8a>
	{
		Delay_ms(10);
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 ab 01 	call	0x356	; 0x356 <Delay_ms>
		if(counter%50==0 &&counter!=0)
 20c:	9e 01       	movw	r18, r28
 20e:	36 95       	lsr	r19
 210:	27 95       	ror	r18
 212:	ab e7       	ldi	r26, 0x7B	; 123
 214:	b4 e1       	ldi	r27, 0x14	; 20
 216:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__umulhisi3>
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	42 e3       	ldi	r20, 0x32	; 50
 220:	48 9f       	mul	r20, r24
 222:	90 01       	movw	r18, r0
 224:	49 9f       	mul	r20, r25
 226:	30 0d       	add	r19, r0
 228:	11 24       	eor	r1, r1
 22a:	c2 17       	cp	r28, r18
 22c:	d3 07       	cpc	r29, r19
 22e:	31 f4       	brne	.+12     	; 0x23c <yellowForCar+0x4a>
 230:	20 97       	sbiw	r28, 0x00	; 0
 232:	21 f0       	breq	.+8      	; 0x23c <yellowForCar+0x4a>
		{
			LED_toggle(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 3b 02 	call	0x476	; 0x476 <LED_toggle>
		}
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
 23c:	40 e6       	ldi	r20, 0x60	; 96
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	84 e4       	ldi	r24, 0x44	; 68
 244:	0e 94 a0 01 	call	0x340	; 0x340 <BUTTON_read>
		buttonStatus=bufferButtonStatus;
 248:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 24c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <buttonStatus>
		while(bufferButtonStatus==HIGH)
 250:	06 c0       	rjmp	.+12     	; 0x25e <yellowForCar+0x6c>
		{
			BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
 252:	40 e6       	ldi	r20, 0x60	; 96
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	84 e4       	ldi	r24, 0x44	; 68
 25a:	0e 94 a0 01 	call	0x340	; 0x340 <BUTTON_read>
		{
			LED_toggle(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
		}
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
		buttonStatus=bufferButtonStatus;
		while(bufferButtonStatus==HIGH)
 25e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	b1 f3       	breq	.-20     	; 0x252 <yellowForCar+0x60>
		{
			BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
		}
		if(buttonStatus==HIGH)
 266:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonStatus>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	31 f4       	brne	.+12     	; 0x27a <yellowForCar+0x88>
		{
			carsYelllowGreenCase();
 26e:	0e 94 8e 00 	call	0x11c	; 0x11c <carsYelllowGreenCase>
			pedToNormalMode();
 272:	0e 94 a9 00 	call	0x152	; 0x152 <pedToNormalMode>
			appFLow=PED_SEQUENCE;
 276:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 278:	07 c0       	rjmp	.+14     	; 0x288 <yellowForCar+0x96>
	// yellow off
	/////////////////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
	LED_on(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
	for(counter=0;counter<500;counter++)
 27a:	21 96       	adiw	r28, 0x01	; 1
 27c:	c4 3f       	cpi	r28, 0xF4	; 244
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	d8 07       	cpc	r29, r24
 282:	08 f4       	brcc	.+2      	; 0x286 <yellowForCar+0x94>
 284:	bf cf       	rjmp	.-130    	; 0x204 <yellowForCar+0x12>
	//}
	//}
	// yellow off
	/////////////////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
 286:	c0 e0       	ldi	r28, 0x00	; 0
			pedToNormalMode();
			appFLow=PED_SEQUENCE;
			break;
		}
	}
	LED_off(CARS_YELLOWLED_PORT,CARS_YELLOWLED_PIN);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	return appFLow;
}
 290:	8c 2f       	mov	r24, r28
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <redForCar>:
EN_APPFLOW_t redForCar()
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
	//}
	//red off
	//////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
	LED_on(CARS_REDLED_PORT,CARS_REDLED_PIN);
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	81 e4       	ldi	r24, 0x41	; 65
 2a0:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
	for(counter=0;counter<500;counter++)
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	2a c0       	rjmp	.+84     	; 0x2fe <redForCar+0x66>
	{
		Delay_ms(10);
 2aa:	8a e0       	ldi	r24, 0x0A	; 10
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 ab 01 	call	0x356	; 0x356 <Delay_ms>
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
 2b2:	40 e6       	ldi	r20, 0x60	; 96
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	84 e4       	ldi	r24, 0x44	; 68
 2ba:	0e 94 a0 01 	call	0x340	; 0x340 <BUTTON_read>
		buttonStatus=bufferButtonStatus;
 2be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <buttonStatus>
		while(bufferButtonStatus==HIGH)
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <redForCar+0x3c>
		{
			BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
 2c8:	40 e6       	ldi	r20, 0x60	; 96
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	84 e4       	ldi	r24, 0x44	; 68
 2d0:	0e 94 a0 01 	call	0x340	; 0x340 <BUTTON_read>
	for(counter=0;counter<500;counter++)
	{
		Delay_ms(10);
		BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
		buttonStatus=bufferButtonStatus;
		while(bufferButtonStatus==HIGH)
 2d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	b1 f3       	breq	.-20     	; 0x2c8 <redForCar+0x30>
		{
			BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&bufferButtonStatus);
		}
		if(buttonStatus==HIGH)
 2dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonStatus>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	61 f4       	brne	.+24     	; 0x2fc <redForCar+0x64>
		{
			LED_on(PED_GREENLED_PORT,PED_GREENLED_PIN);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
			Delay_ms(5000);
 2ec:	88 e8       	ldi	r24, 0x88	; 136
 2ee:	93 e1       	ldi	r25, 0x13	; 19
 2f0:	0e 94 ab 01 	call	0x356	; 0x356 <Delay_ms>
			pedToNormalMode();
 2f4:	0e 94 a9 00 	call	0x152	; 0x152 <pedToNormalMode>
			appFLow=PED_SEQUENCE;
 2f8:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <redForCar+0x70>
	//red off
	//////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
	LED_on(CARS_REDLED_PORT,CARS_REDLED_PIN);
	for(counter=0;counter<500;counter++)
 2fc:	21 96       	adiw	r28, 0x01	; 1
 2fe:	c4 3f       	cpi	r28, 0xF4	; 244
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	d8 07       	cpc	r29, r24
 304:	90 f2       	brcs	.-92     	; 0x2aa <redForCar+0x12>
	//  }
	//}
	//red off
	//////////////////
	u32 counter=0;
	EN_APPFLOW_t appFLow=NORMAL_SEQUENCE;
 306:	c0 e0       	ldi	r28, 0x00	; 0
			pedToNormalMode();
			appFLow=PED_SEQUENCE;
			break;
		}
	}
	LED_off(CARS_REDLED_PORT,CARS_REDLED_PIN);
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	0e 94 37 02 	call	0x46e	; 0x46e <LED_off>
	return appFLow;
}
 310:	8c 2f       	mov	r24, r28
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <appStart>:
u8 appStart()
{
	EN_APPFLOW_t appFlow=NORMAL_SEQUENCE;
	appFlow=greenForCar();
 318:	0e 94 b8 00 	call	0x170	; 0x170 <greenForCar>
	if(appFlow !=NORMAL_SEQUENCE)
 31c:	81 11       	cpse	r24, r1
 31e:	0a c0       	rjmp	.+20     	; 0x334 <appStart+0x1c>
	{
		return 0;
	}
	else
	{
		appFlow=yellowForCar();
 320:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <yellowForCar>
		if(appFlow !=NORMAL_SEQUENCE)
 324:	81 11       	cpse	r24, r1
 326:	06 c0       	rjmp	.+12     	; 0x334 <appStart+0x1c>
		{
			return 0;
		}
		else
		{
			appFlow=redForCar();
 328:	0e 94 4c 01 	call	0x298	; 0x298 <redForCar>
			if(appFlow !=NORMAL_SEQUENCE)
 32c:	81 11       	cpse	r24, r1
 32e:	02 c0       	rjmp	.+4      	; 0x334 <appStart+0x1c>
			{
				return 0;
			}
			else
			{
				appFlow=yellowForCar();
 330:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <yellowForCar>
			}
		}
	}
	return 0;
}
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret

00000338 <BUTTON_init>:
#include "buttons.h"

EN_DIOERR_t BUTTON_init(u8 portNumber,u8 pinNumber)
{
	EN_DIOERR_t dioErr=OK;
	dioErr = DIO_init(portNumber,pinNumber,IN);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	0e 94 43 02 	call	0x486	; 0x486 <DIO_init>
	return dioErr;
}
 33e:	08 95       	ret

00000340 <BUTTON_read>:
EN_DIOERR_t BUTTON_read(u8 portNumber,u8 pinNumber,u8 *value)
{
	EN_DIOERR_t dioErr=OK;
	if(NULL==value)
 340:	41 15       	cp	r20, r1
 342:	51 05       	cpc	r21, r1
 344:	19 f0       	breq	.+6      	; 0x34c <BUTTON_read+0xc>
	{
		dioErr=NULLPTR;
	}
	else
	{
		dioErr = DIO_read(portNumber,pinNumber,value);
 346:	0e 94 59 03 	call	0x6b2	; 0x6b2 <DIO_read>
 34a:	08 95       	ret
EN_DIOERR_t BUTTON_read(u8 portNumber,u8 pinNumber,u8 *value)
{
	EN_DIOERR_t dioErr=OK;
	if(NULL==value)
	{
		dioErr=NULLPTR;
 34c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		dioErr = DIO_read(portNumber,pinNumber,value);
	}	
	return dioErr;
 34e:	08 95       	ret

00000350 <Delay_init>:
#include "Delay.h"


void Delay_init()
{
	TIMER_init();
 350:	0e 94 00 04 	call	0x800	; 0x800 <TIMER_init>
 354:	08 95       	ret

00000356 <Delay_ms>:
}
EN_TIMERERR_t Delay_ms(u32 msDelay)
{
 356:	cf 92       	push	r12
 358:	df 92       	push	r13
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
	f32 timerTick = 0, initValueBuffer = 0;
	u32 overFlowsNum = 0, overFlowsCounter = 0, preScalerValue=1;
	u8  timerInitValue = 0;
	EN_PRESCALER_t preScalerType = PRESCALER8;
	EN_TIMERERR_t timerErr=TIMER_OK;
	if(msDelay>3)
 366:	84 30       	cpi	r24, 0x04	; 4
 368:	91 05       	cpc	r25, r1
 36a:	08 f0       	brcs	.+2      	; 0x36e <Delay_ms+0x18>
	{
		msDelay-=3;
 36c:	03 97       	sbiw	r24, 0x03	; 3
	{
		preScalerType = PRESCALER1024;
		preScalerValue = 1024;
	}
	timerTick = (f32)preScalerValue / CPU_FREQUENCY;
	overFlowsNum = (u32)(((f32)msDelay/1000) / (timerTick * 256)) + 1;
 36e:	bc 01       	movw	r22, r24
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 2a 05 	call	0xa54	; 0xa54 <__floatunsisf>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	4a e7       	ldi	r20, 0x7A	; 122
 37e:	54 e4       	ldi	r21, 0x44	; 68
 380:	0e 94 89 04 	call	0x912	; 0x912 <__divsf3>
 384:	6b 01       	movw	r12, r22
 386:	7c 01       	movw	r14, r24
 388:	2d eb       	ldi	r18, 0xBD	; 189
 38a:	37 e3       	ldi	r19, 0x37	; 55
 38c:	46 e8       	ldi	r20, 0x86	; 134
 38e:	59 e3       	ldi	r21, 0x39	; 57
 390:	0e 94 89 04 	call	0x912	; 0x912 <__divsf3>
 394:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fixunssfsi>
 398:	8b 01       	movw	r16, r22
 39a:	0f 5f       	subi	r16, 0xFF	; 255
 39c:	1f 4f       	sbci	r17, 0xFF	; 255
	initValueBuffer = 256 - ((((f32)msDelay / 1000) / timerTick) / (overFlowsNum));
 39e:	2d eb       	ldi	r18, 0xBD	; 189
 3a0:	37 e3       	ldi	r19, 0x37	; 55
 3a2:	46 e8       	ldi	r20, 0x86	; 134
 3a4:	55 e3       	ldi	r21, 0x35	; 53
 3a6:	c7 01       	movw	r24, r14
 3a8:	b6 01       	movw	r22, r12
 3aa:	0e 94 89 04 	call	0x912	; 0x912 <__divsf3>
 3ae:	6b 01       	movw	r12, r22
 3b0:	7c 01       	movw	r14, r24
 3b2:	b8 01       	movw	r22, r16
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 2a 05 	call	0xa54	; 0xa54 <__floatunsisf>
 3bc:	9b 01       	movw	r18, r22
 3be:	ac 01       	movw	r20, r24
 3c0:	c7 01       	movw	r24, r14
 3c2:	b6 01       	movw	r22, r12
 3c4:	0e 94 89 04 	call	0x912	; 0x912 <__divsf3>
 3c8:	9b 01       	movw	r18, r22
 3ca:	ac 01       	movw	r20, r24
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 e8       	ldi	r24, 0x80	; 128
 3d2:	93 e4       	ldi	r25, 0x43	; 67
 3d4:	0e 94 1c 04 	call	0x838	; 0x838 <__subsf3>
 3d8:	6b 01       	movw	r12, r22
 3da:	7c 01       	movw	r14, r24
	timerInitValue = initValueBuffer;
 3dc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fixunssfsi>
 3e0:	c6 2f       	mov	r28, r22
	initValueBuffer -= timerInitValue;
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 2c 05 	call	0xa58	; 0xa58 <__floatsisf>
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	0e 94 1c 04 	call	0x838	; 0x838 <__subsf3>
	initValueBuffer *= 100;
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	48 ec       	ldi	r20, 0xC8	; 200
 3fe:	52 e4       	ldi	r21, 0x42	; 66
 400:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
	if (initValueBuffer >= 50)
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	48 e4       	ldi	r20, 0x48	; 72
 40a:	52 e4       	ldi	r21, 0x42	; 66
 40c:	0e 94 b8 05 	call	0xb70	; 0xb70 <__gesf2>
 410:	88 23       	and	r24, r24
 412:	0c f0       	brlt	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		timerInitValue++;
 414:	cf 5f       	subi	r28, 0xFF	; 255
	}
	else
	{
	}
	
	timerErr = TIMER_set_value(timerInitValue);
 416:	8c 2f       	mov	r24, r28
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 0d 04 	call	0x81a	; 0x81a <TIMER_set_value>
 41e:	f8 2e       	mov	r15, r24
	if(timerErr != TIMER_OK)
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	f8 12       	cpse	r15, r24
 424:	11 c0       	rjmp	.+34     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		
	}
	else
	{
		
		timerErr = TIMER_start(preScalerType);
 426:	0e 94 02 04 	call	0x804	; 0x804 <TIMER_start>
 42a:	f8 2e       	mov	r15, r24
	TIMER_init();
}
EN_TIMERERR_t Delay_ms(u32 msDelay)
{
	f32 timerTick = 0, initValueBuffer = 0;
	u32 overFlowsNum = 0, overFlowsCounter = 0, preScalerValue=1;
 42c:	c0 e0       	ldi	r28, 0x00	; 0
 42e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else
	{
		
		timerErr = TIMER_start(preScalerType);
		while(overFlowsCounter<overFlowsNum)
 430:	06 c0       	rjmp	.+12     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		{
			//TIMER_set_value(timerInitValue);
			while((TIFR&(1<<0))==0);
 432:	08 b6       	in	r0, 0x38	; 56
 434:	00 fe       	sbrs	r0, 0
 436:	fd cf       	rjmp	.-6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			
			TIMER_reset_TIFR();
 438:	0e 94 18 04 	call	0x830	; 0x830 <TIMER_reset_TIFR>
			overFlowsCounter++;
 43c:	21 96       	adiw	r28, 0x01	; 1
	}
	else
	{
		
		timerErr = TIMER_start(preScalerType);
		while(overFlowsCounter<overFlowsNum)
 43e:	c0 17       	cp	r28, r16
 440:	d1 07       	cpc	r29, r17
 442:	b8 f3       	brcs	.-18     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			
			TIMER_reset_TIFR();
			overFlowsCounter++;
		
		}
		TIMER_stop();
 444:	0e 94 0b 04 	call	0x816	; 0x816 <TIMER_stop>
	}
	return timerErr;
	
 448:	8f 2d       	mov	r24, r15
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	cf 90       	pop	r12
 45a:	08 95       	ret

0000045c <LED_init>:
#include "LED.h"

EN_DIOERR_t LED_init(u8 ledPort,u8 ledPin)
{
	EN_DIOERR_t dioErr=OK;
	dioErr = DIO_init(ledPort,ledPort,OUT);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	68 2f       	mov	r22, r24
 460:	0e 94 43 02 	call	0x486	; 0x486 <DIO_init>
	return dioErr;
}
 464:	08 95       	ret

00000466 <LED_on>:
EN_DIOERR_t LED_on(u8 ledPort,u8 ledPin)
{
	EN_DIOERR_t dioErr=OK;
	dioErr =DIO_write(ledPort,ledPin,HIGH);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	0e 94 ce 02 	call	0x59c	; 0x59c <DIO_write>
	return dioErr;
}
 46c:	08 95       	ret

0000046e <LED_off>:
EN_DIOERR_t LED_off(u8 ledPort,u8 ledPin)
{
	EN_DIOERR_t dioErr=OK;
	dioErr = DIO_write(ledPort,ledPin,LOW);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	0e 94 ce 02 	call	0x59c	; 0x59c <DIO_write>
	return dioErr;
}
 474:	08 95       	ret

00000476 <LED_toggle>:
EN_DIOERR_t LED_toggle(u8 ledPort,u8 ledPin)
{
	EN_DIOERR_t dioErr=OK;
	dioErr = DIO_toggle(ledPort,ledPin);
 476:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_toggle>
	return dioErr;
}
 47a:	08 95       	ret

0000047c <main>:

#include "Application/Application.h"

int main(void)
{
	app_init();
 47c:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	/* Replace with your application code */
	while (1)
	{
		appStart();
 480:	0e 94 8c 01 	call	0x318	; 0x318 <appStart>
 484:	fd cf       	rjmp	.-6      	; 0x480 <main+0x4>

00000486 <DIO_init>:


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
	switch(portNumber)
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	41 f1       	breq	.+80     	; 0x4da <DIO_init+0x54>
 48a:	18 f4       	brcc	.+6      	; 0x492 <DIO_init+0xc>
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	41 f0       	breq	.+16     	; 0x4a0 <DIO_init+0x1a>
 490:	7b c0       	rjmp	.+246    	; 0x588 <DIO_init+0x102>
 492:	83 34       	cpi	r24, 0x43	; 67
 494:	09 f4       	brne	.+2      	; 0x498 <DIO_init+0x12>
 496:	3e c0       	rjmp	.+124    	; 0x514 <DIO_init+0x8e>
 498:	84 34       	cpi	r24, 0x44	; 68
 49a:	09 f4       	brne	.+2      	; 0x49e <DIO_init+0x18>
 49c:	58 c0       	rjmp	.+176    	; 0x54e <DIO_init+0xc8>
 49e:	74 c0       	rjmp	.+232    	; 0x588 <DIO_init+0x102>
	{
		case PORT_A:
		if(direction==OUT)
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	61 f4       	brne	.+24     	; 0x4bc <DIO_init+0x36>
		{
		DDRA |=(1<<pinNumber);
 4a4:	2a b3       	in	r18, 0x1a	; 26
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_init+0x2a>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_init+0x26>
 4b4:	82 2b       	or	r24, r18
 4b6:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	08 95       	ret
		case PORT_A:
		if(direction==OUT)
		{
		DDRA |=(1<<pinNumber);
		}
		else if(direction==IN)
 4bc:	41 11       	cpse	r20, r1
 4be:	66 c0       	rjmp	.+204    	; 0x58c <DIO_init+0x106>
		{
			
			DDRA &= ~(1<<pinNumber);
 4c0:	2a b3       	in	r18, 0x1a	; 26
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_init+0x46>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_init+0x42>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	08 95       	ret
			errState=INVALID_ARGUMENT;
		}
		break;
		
		case PORT_B:
		if(direction==OUT)
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	61 f4       	brne	.+24     	; 0x4f6 <DIO_init+0x70>
		{
			DDRB |=(1<<pinNumber);
 4de:	27 b3       	in	r18, 0x17	; 23
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_init+0x64>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_init+0x60>
 4ee:	82 2b       	or	r24, r18
 4f0:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	08 95       	ret
		case PORT_B:
		if(direction==OUT)
		{
			DDRB |=(1<<pinNumber);
		}
		else if(direction==IN)
 4f6:	41 11       	cpse	r20, r1
 4f8:	4b c0       	rjmp	.+150    	; 0x590 <DIO_init+0x10a>
		{
					
			DDRB &= ~(1<<pinNumber);
 4fa:	27 b3       	in	r18, 0x17	; 23
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_init+0x80>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_init+0x7c>
 50a:	80 95       	com	r24
 50c:	82 23       	and	r24, r18
 50e:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	08 95       	ret
			errState=INVALID_ARGUMENT;
		}
		break;
		
		case PORT_C:
		if(direction==OUT)
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	61 f4       	brne	.+24     	; 0x530 <DIO_init+0xaa>
		{
			DDRC |=(1<<pinNumber);
 518:	24 b3       	in	r18, 0x14	; 20
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_init+0x9e>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_init+0x9a>
 528:	82 2b       	or	r24, r18
 52a:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	08 95       	ret
		case PORT_C:
		if(direction==OUT)
		{
			DDRC |=(1<<pinNumber);
		}
		else if(direction==IN)
 530:	41 11       	cpse	r20, r1
 532:	30 c0       	rjmp	.+96     	; 0x594 <DIO_init+0x10e>
		{
			
			DDRC &= ~(1<<pinNumber);
 534:	24 b3       	in	r18, 0x14	; 20
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_init+0xba>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_init+0xb6>
 544:	80 95       	com	r24
 546:	82 23       	and	r24, r18
 548:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	08 95       	ret
			errState=INVALID_ARGUMENT;
		}
		break;
		
		case PORT_D:
		if(direction==OUT)
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	61 f4       	brne	.+24     	; 0x56a <DIO_init+0xe4>
		{
			DDRD |=(1<<pinNumber);
 552:	21 b3       	in	r18, 0x11	; 17
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_init+0xd8>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_init+0xd4>
 562:	82 2b       	or	r24, r18
 564:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	08 95       	ret
		case PORT_D:
		if(direction==OUT)
		{
			DDRD |=(1<<pinNumber);
		}
		else if(direction==IN)
 56a:	41 11       	cpse	r20, r1
 56c:	15 c0       	rjmp	.+42     	; 0x598 <DIO_init+0x112>
		{
			
			DDRD &= ~(1<<pinNumber);
 56e:	21 b3       	in	r18, 0x11	; 17
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_init+0xf4>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_init+0xf0>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"


EN_DIOERR_t DIO_init(u8 portNumber,EN_PINNUM_t pinNumber,u8 direction)
{
	EN_DIOERR_t errState=OK;
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	08 95       	ret
		{
			errState=INVALID_ARGUMENT;
		}
		break;
		default:
		errState=INVALID_ARGUMENT;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	08 95       	ret
			
			DDRA &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	08 95       	ret
					
			DDRB &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret
			
			DDRC &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
			
			DDRD &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 598:	81 e0       	ldi	r24, 0x01	; 1
		errState=INVALID_ARGUMENT;
		break;

	}
	return errState;
}
 59a:	08 95       	ret

0000059c <DIO_write>:


EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
	switch(portNumber)
 59c:	82 34       	cpi	r24, 0x42	; 66
 59e:	41 f1       	breq	.+80     	; 0x5f0 <DIO_write+0x54>
 5a0:	18 f4       	brcc	.+6      	; 0x5a8 <DIO_write+0xc>
 5a2:	81 34       	cpi	r24, 0x41	; 65
 5a4:	41 f0       	breq	.+16     	; 0x5b6 <DIO_write+0x1a>
 5a6:	7b c0       	rjmp	.+246    	; 0x69e <DIO_write+0x102>
 5a8:	83 34       	cpi	r24, 0x43	; 67
 5aa:	09 f4       	brne	.+2      	; 0x5ae <DIO_write+0x12>
 5ac:	3e c0       	rjmp	.+124    	; 0x62a <DIO_write+0x8e>
 5ae:	84 34       	cpi	r24, 0x44	; 68
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <DIO_write+0x18>
 5b2:	58 c0       	rjmp	.+176    	; 0x664 <DIO_write+0xc8>
 5b4:	74 c0       	rjmp	.+232    	; 0x69e <DIO_write+0x102>
	{
		case PORT_A:
		if(value==HIGH)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	61 f4       	brne	.+24     	; 0x5d2 <DIO_write+0x36>
		{
			PORTA |=(1<<pinNumber);
 5ba:	2b b3       	in	r18, 0x1b	; 27
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_write+0x2a>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_write+0x26>
 5ca:	82 2b       	or	r24, r18
 5cc:	8b bb       	out	0x1b, r24	; 27



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	08 95       	ret
		case PORT_A:
		if(value==HIGH)
		{
			PORTA |=(1<<pinNumber);
		}
		else if(value==LOW)
 5d2:	41 11       	cpse	r20, r1
 5d4:	66 c0       	rjmp	.+204    	; 0x6a2 <DIO_write+0x106>
		{
				
			PORTA &= ~(1<<pinNumber);
 5d6:	2b b3       	in	r18, 0x1b	; 27
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_write+0x46>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_write+0x42>
 5e6:	80 95       	com	r24
 5e8:	82 23       	and	r24, r18
 5ea:	8b bb       	out	0x1b, r24	; 27



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	08 95       	ret
			errState=INVALID_ARGUMENT;
		}
		break;
			
		case PORT_B:
		if(value==HIGH)
 5f0:	41 30       	cpi	r20, 0x01	; 1
 5f2:	61 f4       	brne	.+24     	; 0x60c <DIO_write+0x70>
		{
			PORTB |=(1<<pinNumber);
 5f4:	28 b3       	in	r18, 0x18	; 24
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_write+0x64>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_write+0x60>
 604:	82 2b       	or	r24, r18
 606:	88 bb       	out	0x18, r24	; 24



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	08 95       	ret
		case PORT_B:
		if(value==HIGH)
		{
			PORTB |=(1<<pinNumber);
		}
		else if(value==LOW)
 60c:	41 11       	cpse	r20, r1
 60e:	4b c0       	rjmp	.+150    	; 0x6a6 <DIO_write+0x10a>
		{
				
			PORTB &= ~(1<<pinNumber);
 610:	28 b3       	in	r18, 0x18	; 24
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_write+0x80>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_write+0x7c>
 620:	80 95       	com	r24
 622:	82 23       	and	r24, r18
 624:	88 bb       	out	0x18, r24	; 24



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	08 95       	ret
			errState=INVALID_ARGUMENT;
		}
		break;
			
		case PORT_C:
		if(value==HIGH)
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	61 f4       	brne	.+24     	; 0x646 <DIO_write+0xaa>
		{
			PORTC |=(1<<pinNumber);
 62e:	25 b3       	in	r18, 0x15	; 21
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_write+0x9e>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	6a 95       	dec	r22
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_write+0x9a>
 63e:	82 2b       	or	r24, r18
 640:	85 bb       	out	0x15, r24	; 21



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	08 95       	ret
		case PORT_C:
		if(value==HIGH)
		{
			PORTC |=(1<<pinNumber);
		}
		else if(value==LOW)
 646:	41 11       	cpse	r20, r1
 648:	30 c0       	rjmp	.+96     	; 0x6aa <DIO_write+0x10e>
		{
				
			PORTC &= ~(1<<pinNumber);
 64a:	25 b3       	in	r18, 0x15	; 21
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_write+0xba>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_write+0xb6>
 65a:	80 95       	com	r24
 65c:	82 23       	and	r24, r18
 65e:	85 bb       	out	0x15, r24	; 21



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	08 95       	ret
			errState=INVALID_ARGUMENT;
		}
		break;
			
		case PORT_D:
		if(value==HIGH)
 664:	41 30       	cpi	r20, 0x01	; 1
 666:	61 f4       	brne	.+24     	; 0x680 <DIO_write+0xe4>
		{
			PORTD |=(1<<pinNumber);
 668:	22 b3       	in	r18, 0x12	; 18
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_write+0xd8>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_write+0xd4>
 678:	82 2b       	or	r24, r18
 67a:	82 bb       	out	0x12, r24	; 18



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	08 95       	ret
		case PORT_D:
		if(value==HIGH)
		{
			PORTD |=(1<<pinNumber);
		}
		else if(value==LOW)
 680:	41 11       	cpse	r20, r1
 682:	15 c0       	rjmp	.+42     	; 0x6ae <DIO_write+0x112>
		{
				
			PORTD &= ~(1<<pinNumber);
 684:	22 b3       	in	r18, 0x12	; 18
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_write+0xf4>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_write+0xf0>
 694:	80 95       	com	r24
 696:	82 23       	and	r24, r18
 698:	82 bb       	out	0x12, r24	; 18



EN_DIOERR_t DIO_write(u8 portNumber,EN_PINNUM_t pinNumber,u8 value)
{
	EN_DIOERR_t errState=OK;
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	08 95       	ret
		{
			errState=INVALID_ARGUMENT;
		}
		break;
		default:
		errState=INVALID_ARGUMENT;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret
				
			PORTA &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	08 95       	ret
				
			PORTB &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	08 95       	ret
				
			PORTC &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret
				
			PORTD &= ~(1<<pinNumber);
		}
		else
		{
			errState=INVALID_ARGUMENT;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
		default:
		errState=INVALID_ARGUMENT;
		break;
	}
	return errState;
}
 6b0:	08 95       	ret

000006b2 <DIO_read>:
EN_DIOERR_t DIO_read(u8 portNumber,EN_PINNUM_t pinNumber,u8 *value)
{
	EN_DIOERR_t errState=OK;
	switch(portNumber)
 6b2:	82 34       	cpi	r24, 0x42	; 66
 6b4:	09 f1       	breq	.+66     	; 0x6f8 <DIO_read+0x46>
 6b6:	18 f4       	brcc	.+6      	; 0x6be <DIO_read+0xc>
 6b8:	81 34       	cpi	r24, 0x41	; 65
 6ba:	39 f0       	breq	.+14     	; 0x6ca <DIO_read+0x18>
 6bc:	62 c0       	rjmp	.+196    	; 0x782 <DIO_read+0xd0>
 6be:	83 34       	cpi	r24, 0x43	; 67
 6c0:	91 f1       	breq	.+100    	; 0x726 <DIO_read+0x74>
 6c2:	84 34       	cpi	r24, 0x44	; 68
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <DIO_read+0x16>
 6c6:	46 c0       	rjmp	.+140    	; 0x754 <DIO_read+0xa2>
 6c8:	5c c0       	rjmp	.+184    	; 0x782 <DIO_read+0xd0>
	{
		case PORT_A:
		*value=(PINA &(1<<pinNumber))>>pinNumber;
 6ca:	79 b3       	in	r23, 0x19	; 25
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	9c 01       	movw	r18, r24
 6d2:	06 2e       	mov	r0, r22
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_read+0x28>
 6d6:	22 0f       	add	r18, r18
 6d8:	33 1f       	adc	r19, r19
 6da:	0a 94       	dec	r0
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_read+0x24>
 6de:	87 2f       	mov	r24, r23
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	82 23       	and	r24, r18
 6e4:	93 23       	and	r25, r19
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_read+0x3a>
 6e8:	95 95       	asr	r25
 6ea:	87 95       	ror	r24
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_read+0x36>
 6f0:	fa 01       	movw	r30, r20
 6f2:	80 83       	st	Z, r24
	}
	return errState;
}
EN_DIOERR_t DIO_read(u8 portNumber,EN_PINNUM_t pinNumber,u8 *value)
{
	EN_DIOERR_t errState=OK;
 6f4:	82 e0       	ldi	r24, 0x02	; 2
	switch(portNumber)
	{
		case PORT_A:
		*value=(PINA &(1<<pinNumber))>>pinNumber;
		break;
 6f6:	08 95       	ret
			
		case PORT_B:
        *value=(PINB &(1<<pinNumber))>>pinNumber;
 6f8:	76 b3       	in	r23, 0x16	; 22
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	9c 01       	movw	r18, r24
 700:	06 2e       	mov	r0, r22
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_read+0x56>
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_read+0x52>
 70c:	87 2f       	mov	r24, r23
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	82 23       	and	r24, r18
 712:	93 23       	and	r25, r19
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_read+0x68>
 716:	95 95       	asr	r25
 718:	87 95       	ror	r24
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_read+0x64>
 71e:	fa 01       	movw	r30, r20
 720:	80 83       	st	Z, r24
	}
	return errState;
}
EN_DIOERR_t DIO_read(u8 portNumber,EN_PINNUM_t pinNumber,u8 *value)
{
	EN_DIOERR_t errState=OK;
 722:	82 e0       	ldi	r24, 0x02	; 2
		*value=(PINA &(1<<pinNumber))>>pinNumber;
		break;
			
		case PORT_B:
        *value=(PINB &(1<<pinNumber))>>pinNumber;
		break;
 724:	08 95       	ret
			
		case PORT_C:
		*value=(PINC &(1<<pinNumber))>>pinNumber;
 726:	73 b3       	in	r23, 0x13	; 19
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	9c 01       	movw	r18, r24
 72e:	06 2e       	mov	r0, r22
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_read+0x84>
 732:	22 0f       	add	r18, r18
 734:	33 1f       	adc	r19, r19
 736:	0a 94       	dec	r0
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_read+0x80>
 73a:	87 2f       	mov	r24, r23
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	82 23       	and	r24, r18
 740:	93 23       	and	r25, r19
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_read+0x96>
 744:	95 95       	asr	r25
 746:	87 95       	ror	r24
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_read+0x92>
 74c:	fa 01       	movw	r30, r20
 74e:	80 83       	st	Z, r24
	}
	return errState;
}
EN_DIOERR_t DIO_read(u8 portNumber,EN_PINNUM_t pinNumber,u8 *value)
{
	EN_DIOERR_t errState=OK;
 750:	82 e0       	ldi	r24, 0x02	; 2
        *value=(PINB &(1<<pinNumber))>>pinNumber;
		break;
			
		case PORT_C:
		*value=(PINC &(1<<pinNumber))>>pinNumber;
		break;
 752:	08 95       	ret
			
		case PORT_D:
		*value=(PIND &(1<<pinNumber))>>pinNumber;
 754:	70 b3       	in	r23, 0x10	; 16
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	9c 01       	movw	r18, r24
 75c:	06 2e       	mov	r0, r22
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_read+0xb2>
 760:	22 0f       	add	r18, r18
 762:	33 1f       	adc	r19, r19
 764:	0a 94       	dec	r0
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_read+0xae>
 768:	87 2f       	mov	r24, r23
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	82 23       	and	r24, r18
 76e:	93 23       	and	r25, r19
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_read+0xc4>
 772:	95 95       	asr	r25
 774:	87 95       	ror	r24
 776:	6a 95       	dec	r22
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_read+0xc0>
 77a:	fa 01       	movw	r30, r20
 77c:	80 83       	st	Z, r24
	}
	return errState;
}
EN_DIOERR_t DIO_read(u8 portNumber,EN_PINNUM_t pinNumber,u8 *value)
{
	EN_DIOERR_t errState=OK;
 77e:	82 e0       	ldi	r24, 0x02	; 2
		*value=(PINC &(1<<pinNumber))>>pinNumber;
		break;
			
		case PORT_D:
		*value=(PIND &(1<<pinNumber))>>pinNumber;
		break;
 780:	08 95       	ret
		default:
		errState=INVALID_ARGUMENT;
 782:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errState;
}
 784:	08 95       	ret

00000786 <DIO_toggle>:

EN_DIOERR_t DIO_toggle(u8 portNumber,EN_PINNUM_t pinNumber)
{
	EN_DIOERR_t errState=OK;
	switch(portNumber)
 786:	82 34       	cpi	r24, 0x42	; 66
 788:	a9 f0       	breq	.+42     	; 0x7b4 <DIO_toggle+0x2e>
 78a:	18 f4       	brcc	.+6      	; 0x792 <DIO_toggle+0xc>
 78c:	81 34       	cpi	r24, 0x41	; 65
 78e:	31 f0       	breq	.+12     	; 0x79c <DIO_toggle+0x16>
 790:	35 c0       	rjmp	.+106    	; 0x7fc <DIO_toggle+0x76>
 792:	83 34       	cpi	r24, 0x43	; 67
 794:	d9 f0       	breq	.+54     	; 0x7cc <DIO_toggle+0x46>
 796:	84 34       	cpi	r24, 0x44	; 68
 798:	29 f1       	breq	.+74     	; 0x7e4 <DIO_toggle+0x5e>
 79a:	30 c0       	rjmp	.+96     	; 0x7fc <DIO_toggle+0x76>
	{
		case PORT_A:
		PORTA ^= (1<<pinNumber);
 79c:	2b b3       	in	r18, 0x1b	; 27
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_toggle+0x22>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_toggle+0x1e>
 7ac:	82 27       	eor	r24, r18
 7ae:	8b bb       	out	0x1b, r24	; 27
	return errState;
}

EN_DIOERR_t DIO_toggle(u8 portNumber,EN_PINNUM_t pinNumber)
{
	EN_DIOERR_t errState=OK;
 7b0:	82 e0       	ldi	r24, 0x02	; 2
	switch(portNumber)
	{
		case PORT_A:
		PORTA ^= (1<<pinNumber);
		break;
 7b2:	08 95       	ret
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 7b4:	28 b3       	in	r18, 0x18	; 24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_toggle+0x3a>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_toggle+0x36>
 7c4:	82 27       	eor	r24, r18
 7c6:	88 bb       	out	0x18, r24	; 24
	return errState;
}

EN_DIOERR_t DIO_toggle(u8 portNumber,EN_PINNUM_t pinNumber)
{
	EN_DIOERR_t errState=OK;
 7c8:	82 e0       	ldi	r24, 0x02	; 2
		PORTA ^= (1<<pinNumber);
		break;
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
		break;
 7ca:	08 95       	ret
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 7cc:	25 b3       	in	r18, 0x15	; 21
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_toggle+0x52>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_toggle+0x4e>
 7dc:	82 27       	eor	r24, r18
 7de:	85 bb       	out	0x15, r24	; 21
	return errState;
}

EN_DIOERR_t DIO_toggle(u8 portNumber,EN_PINNUM_t pinNumber)
{
	EN_DIOERR_t errState=OK;
 7e0:	82 e0       	ldi	r24, 0x02	; 2
		PORTB ^= (1<<pinNumber);
		break;
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
		break;
 7e2:	08 95       	ret
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 7e4:	22 b3       	in	r18, 0x12	; 18
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_toggle+0x6a>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_toggle+0x66>
 7f4:	82 27       	eor	r24, r18
 7f6:	82 bb       	out	0x12, r24	; 18
	return errState;
}

EN_DIOERR_t DIO_toggle(u8 portNumber,EN_PINNUM_t pinNumber)
{
	EN_DIOERR_t errState=OK;
 7f8:	82 e0       	ldi	r24, 0x02	; 2
		PORTC ^= (1<<pinNumber);
		break;
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
		break;
 7fa:	08 95       	ret
		default:
		errState=INVALID_ARGUMENT;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errState;
 7fe:	08 95       	ret

00000800 <TIMER_init>:
	else
	{
		*timerState=(TIFR&(1<<0));
	}
	return timerErr;
}
 800:	13 be       	out	0x33, r1	; 51
 802:	08 95       	ret

00000804 <TIMER_start>:
 804:	86 30       	cpi	r24, 0x06	; 6
 806:	28 f4       	brcc	.+10     	; 0x812 <TIMER_start+0xe>
 808:	93 b7       	in	r25, 0x33	; 51
 80a:	89 2b       	or	r24, r25
 80c:	83 bf       	out	0x33, r24	; 51
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	08 95       	ret
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	08 95       	ret

00000816 <TIMER_stop>:
 816:	13 be       	out	0x33, r1	; 51
 818:	08 95       	ret

0000081a <TIMER_set_value>:
EN_TIMERERR_t TIMER_set_value(u32 initValue)
{
	EN_TIMERERR_t timerErr=TIMER_OK;
	if(initValue>255)
 81a:	8f 3f       	cpi	r24, 0xFF	; 255
 81c:	91 05       	cpc	r25, r1
 81e:	09 f0       	breq	.+2      	; 0x822 <TIMER_set_value+0x8>
 820:	28 f4       	brcc	.+10     	; 0x82c <TIMER_set_value+0x12>
	{
		timerErr=TIMER_NOK;
	}
	else
	{
		TCNT0 |= initValue;
 822:	92 b7       	in	r25, 0x32	; 50
 824:	89 2b       	or	r24, r25
 826:	82 bf       	out	0x32, r24	; 50
	}
	return timerErr;
}
EN_TIMERERR_t TIMER_set_value(u32 initValue)
{
	EN_TIMERERR_t timerErr=TIMER_OK;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	08 95       	ret
	if(initValue>255)
	{
		timerErr=TIMER_NOK;
 82c:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		TCNT0 |= initValue;
	}
	return timerErr;
}
 82e:	08 95       	ret

00000830 <TIMER_reset_TIFR>:
void TIMER_reset_TIFR()
{
	TIFR |=(1<<0);
 830:	88 b7       	in	r24, 0x38	; 56
 832:	81 60       	ori	r24, 0x01	; 1
 834:	88 bf       	out	0x38, r24	; 56
 836:	08 95       	ret

00000838 <__subsf3>:
 838:	50 58       	subi	r21, 0x80	; 128

0000083a <__addsf3>:
 83a:	bb 27       	eor	r27, r27
 83c:	aa 27       	eor	r26, r26
 83e:	0e 94 34 04 	call	0x868	; 0x868 <__addsf3x>
 842:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_round>
 846:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscA>
 84a:	38 f0       	brcs	.+14     	; 0x85a <__addsf3+0x20>
 84c:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscB>
 850:	20 f0       	brcs	.+8      	; 0x85a <__addsf3+0x20>
 852:	39 f4       	brne	.+14     	; 0x862 <__stack+0x3>
 854:	9f 3f       	cpi	r25, 0xFF	; 255
 856:	19 f4       	brne	.+6      	; 0x85e <__addsf3+0x24>
 858:	26 f4       	brtc	.+8      	; 0x862 <__stack+0x3>
 85a:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_nan>
 85e:	0e f4       	brtc	.+2      	; 0x862 <__stack+0x3>
 860:	e0 95       	com	r30
 862:	e7 fb       	bst	r30, 7
 864:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>

00000868 <__addsf3x>:
 868:	e9 2f       	mov	r30, r25
 86a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_split3>
 86e:	58 f3       	brcs	.-42     	; 0x846 <__addsf3+0xc>
 870:	ba 17       	cp	r27, r26
 872:	62 07       	cpc	r22, r18
 874:	73 07       	cpc	r23, r19
 876:	84 07       	cpc	r24, r20
 878:	95 07       	cpc	r25, r21
 87a:	20 f0       	brcs	.+8      	; 0x884 <__addsf3x+0x1c>
 87c:	79 f4       	brne	.+30     	; 0x89c <__addsf3x+0x34>
 87e:	a6 f5       	brtc	.+104    	; 0x8e8 <__addsf3x+0x80>
 880:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_zero>
 884:	0e f4       	brtc	.+2      	; 0x888 <__addsf3x+0x20>
 886:	e0 95       	com	r30
 888:	0b 2e       	mov	r0, r27
 88a:	ba 2f       	mov	r27, r26
 88c:	a0 2d       	mov	r26, r0
 88e:	0b 01       	movw	r0, r22
 890:	b9 01       	movw	r22, r18
 892:	90 01       	movw	r18, r0
 894:	0c 01       	movw	r0, r24
 896:	ca 01       	movw	r24, r20
 898:	a0 01       	movw	r20, r0
 89a:	11 24       	eor	r1, r1
 89c:	ff 27       	eor	r31, r31
 89e:	59 1b       	sub	r21, r25
 8a0:	99 f0       	breq	.+38     	; 0x8c8 <__addsf3x+0x60>
 8a2:	59 3f       	cpi	r21, 0xF9	; 249
 8a4:	50 f4       	brcc	.+20     	; 0x8ba <__addsf3x+0x52>
 8a6:	50 3e       	cpi	r21, 0xE0	; 224
 8a8:	68 f1       	brcs	.+90     	; 0x904 <__addsf3x+0x9c>
 8aa:	1a 16       	cp	r1, r26
 8ac:	f0 40       	sbci	r31, 0x00	; 0
 8ae:	a2 2f       	mov	r26, r18
 8b0:	23 2f       	mov	r18, r19
 8b2:	34 2f       	mov	r19, r20
 8b4:	44 27       	eor	r20, r20
 8b6:	58 5f       	subi	r21, 0xF8	; 248
 8b8:	f3 cf       	rjmp	.-26     	; 0x8a0 <__addsf3x+0x38>
 8ba:	46 95       	lsr	r20
 8bc:	37 95       	ror	r19
 8be:	27 95       	ror	r18
 8c0:	a7 95       	ror	r26
 8c2:	f0 40       	sbci	r31, 0x00	; 0
 8c4:	53 95       	inc	r21
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__addsf3x+0x52>
 8c8:	7e f4       	brtc	.+30     	; 0x8e8 <__addsf3x+0x80>
 8ca:	1f 16       	cp	r1, r31
 8cc:	ba 0b       	sbc	r27, r26
 8ce:	62 0b       	sbc	r22, r18
 8d0:	73 0b       	sbc	r23, r19
 8d2:	84 0b       	sbc	r24, r20
 8d4:	ba f0       	brmi	.+46     	; 0x904 <__addsf3x+0x9c>
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	a1 f0       	breq	.+40     	; 0x902 <__addsf3x+0x9a>
 8da:	ff 0f       	add	r31, r31
 8dc:	bb 1f       	adc	r27, r27
 8de:	66 1f       	adc	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	c2 f7       	brpl	.-16     	; 0x8d6 <__addsf3x+0x6e>
 8e6:	0e c0       	rjmp	.+28     	; 0x904 <__addsf3x+0x9c>
 8e8:	ba 0f       	add	r27, r26
 8ea:	62 1f       	adc	r22, r18
 8ec:	73 1f       	adc	r23, r19
 8ee:	84 1f       	adc	r24, r20
 8f0:	48 f4       	brcc	.+18     	; 0x904 <__addsf3x+0x9c>
 8f2:	87 95       	ror	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f7 95       	ror	r31
 8fc:	9e 3f       	cpi	r25, 0xFE	; 254
 8fe:	08 f0       	brcs	.+2      	; 0x902 <__addsf3x+0x9a>
 900:	b0 cf       	rjmp	.-160    	; 0x862 <__stack+0x3>
 902:	93 95       	inc	r25
 904:	88 0f       	add	r24, r24
 906:	08 f0       	brcs	.+2      	; 0x90a <__addsf3x+0xa2>
 908:	99 27       	eor	r25, r25
 90a:	ee 0f       	add	r30, r30
 90c:	97 95       	ror	r25
 90e:	87 95       	ror	r24
 910:	08 95       	ret

00000912 <__divsf3>:
 912:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3x>
 916:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_round>
 91a:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscB>
 91e:	58 f0       	brcs	.+22     	; 0x936 <__divsf3+0x24>
 920:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscA>
 924:	40 f0       	brcs	.+16     	; 0x936 <__divsf3+0x24>
 926:	29 f4       	brne	.+10     	; 0x932 <__divsf3+0x20>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	29 f0       	breq	.+10     	; 0x936 <__divsf3+0x24>
 92c:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
 930:	51 11       	cpse	r21, r1
 932:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
 936:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_nan>

0000093a <__divsf3x>:
 93a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_split3>
 93e:	68 f3       	brcs	.-38     	; 0x91a <__divsf3+0x8>

00000940 <__divsf3_pse>:
 940:	99 23       	and	r25, r25
 942:	b1 f3       	breq	.-20     	; 0x930 <__divsf3+0x1e>
 944:	55 23       	and	r21, r21
 946:	91 f3       	breq	.-28     	; 0x92c <__divsf3+0x1a>
 948:	95 1b       	sub	r25, r21
 94a:	55 0b       	sbc	r21, r21
 94c:	bb 27       	eor	r27, r27
 94e:	aa 27       	eor	r26, r26
 950:	62 17       	cp	r22, r18
 952:	73 07       	cpc	r23, r19
 954:	84 07       	cpc	r24, r20
 956:	38 f0       	brcs	.+14     	; 0x966 <__divsf3_pse+0x26>
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	5f 4f       	sbci	r21, 0xFF	; 255
 95c:	22 0f       	add	r18, r18
 95e:	33 1f       	adc	r19, r19
 960:	44 1f       	adc	r20, r20
 962:	aa 1f       	adc	r26, r26
 964:	a9 f3       	breq	.-22     	; 0x950 <__divsf3_pse+0x10>
 966:	35 d0       	rcall	.+106    	; 0x9d2 <__divsf3_pse+0x92>
 968:	0e 2e       	mov	r0, r30
 96a:	3a f0       	brmi	.+14     	; 0x97a <__divsf3_pse+0x3a>
 96c:	e0 e8       	ldi	r30, 0x80	; 128
 96e:	32 d0       	rcall	.+100    	; 0x9d4 <__divsf3_pse+0x94>
 970:	91 50       	subi	r25, 0x01	; 1
 972:	50 40       	sbci	r21, 0x00	; 0
 974:	e6 95       	lsr	r30
 976:	00 1c       	adc	r0, r0
 978:	ca f7       	brpl	.-14     	; 0x96c <__divsf3_pse+0x2c>
 97a:	2b d0       	rcall	.+86     	; 0x9d2 <__divsf3_pse+0x92>
 97c:	fe 2f       	mov	r31, r30
 97e:	29 d0       	rcall	.+82     	; 0x9d2 <__divsf3_pse+0x92>
 980:	66 0f       	add	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	88 1f       	adc	r24, r24
 986:	bb 1f       	adc	r27, r27
 988:	26 17       	cp	r18, r22
 98a:	37 07       	cpc	r19, r23
 98c:	48 07       	cpc	r20, r24
 98e:	ab 07       	cpc	r26, r27
 990:	b0 e8       	ldi	r27, 0x80	; 128
 992:	09 f0       	breq	.+2      	; 0x996 <__divsf3_pse+0x56>
 994:	bb 0b       	sbc	r27, r27
 996:	80 2d       	mov	r24, r0
 998:	bf 01       	movw	r22, r30
 99a:	ff 27       	eor	r31, r31
 99c:	93 58       	subi	r25, 0x83	; 131
 99e:	5f 4f       	sbci	r21, 0xFF	; 255
 9a0:	3a f0       	brmi	.+14     	; 0x9b0 <__divsf3_pse+0x70>
 9a2:	9e 3f       	cpi	r25, 0xFE	; 254
 9a4:	51 05       	cpc	r21, r1
 9a6:	78 f0       	brcs	.+30     	; 0x9c6 <__divsf3_pse+0x86>
 9a8:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
 9ac:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
 9b0:	5f 3f       	cpi	r21, 0xFF	; 255
 9b2:	e4 f3       	brlt	.-8      	; 0x9ac <__divsf3_pse+0x6c>
 9b4:	98 3e       	cpi	r25, 0xE8	; 232
 9b6:	d4 f3       	brlt	.-12     	; 0x9ac <__divsf3_pse+0x6c>
 9b8:	86 95       	lsr	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	b7 95       	ror	r27
 9c0:	f7 95       	ror	r31
 9c2:	9f 5f       	subi	r25, 0xFF	; 255
 9c4:	c9 f7       	brne	.-14     	; 0x9b8 <__divsf3_pse+0x78>
 9c6:	88 0f       	add	r24, r24
 9c8:	91 1d       	adc	r25, r1
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret
 9d2:	e1 e0       	ldi	r30, 0x01	; 1
 9d4:	66 0f       	add	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	bb 1f       	adc	r27, r27
 9dc:	62 17       	cp	r22, r18
 9de:	73 07       	cpc	r23, r19
 9e0:	84 07       	cpc	r24, r20
 9e2:	ba 07       	cpc	r27, r26
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__divsf3_pse+0xae>
 9e6:	62 1b       	sub	r22, r18
 9e8:	73 0b       	sbc	r23, r19
 9ea:	84 0b       	sbc	r24, r20
 9ec:	ba 0b       	sbc	r27, r26
 9ee:	ee 1f       	adc	r30, r30
 9f0:	88 f7       	brcc	.-30     	; 0x9d4 <__divsf3_pse+0x94>
 9f2:	e0 95       	com	r30
 9f4:	08 95       	ret

000009f6 <__fixunssfsi>:
 9f6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_splitA>
 9fa:	88 f0       	brcs	.+34     	; 0xa1e <__fixunssfsi+0x28>
 9fc:	9f 57       	subi	r25, 0x7F	; 127
 9fe:	98 f0       	brcs	.+38     	; 0xa26 <__fixunssfsi+0x30>
 a00:	b9 2f       	mov	r27, r25
 a02:	99 27       	eor	r25, r25
 a04:	b7 51       	subi	r27, 0x17	; 23
 a06:	b0 f0       	brcs	.+44     	; 0xa34 <__fixunssfsi+0x3e>
 a08:	e1 f0       	breq	.+56     	; 0xa42 <__fixunssfsi+0x4c>
 a0a:	66 0f       	add	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	1a f0       	brmi	.+6      	; 0xa1a <__fixunssfsi+0x24>
 a14:	ba 95       	dec	r27
 a16:	c9 f7       	brne	.-14     	; 0xa0a <__fixunssfsi+0x14>
 a18:	14 c0       	rjmp	.+40     	; 0xa42 <__fixunssfsi+0x4c>
 a1a:	b1 30       	cpi	r27, 0x01	; 1
 a1c:	91 f0       	breq	.+36     	; 0xa42 <__fixunssfsi+0x4c>
 a1e:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_zero>
 a22:	b1 e0       	ldi	r27, 0x01	; 1
 a24:	08 95       	ret
 a26:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_zero>
 a2a:	67 2f       	mov	r22, r23
 a2c:	78 2f       	mov	r23, r24
 a2e:	88 27       	eor	r24, r24
 a30:	b8 5f       	subi	r27, 0xF8	; 248
 a32:	39 f0       	breq	.+14     	; 0xa42 <__fixunssfsi+0x4c>
 a34:	b9 3f       	cpi	r27, 0xF9	; 249
 a36:	cc f3       	brlt	.-14     	; 0xa2a <__fixunssfsi+0x34>
 a38:	86 95       	lsr	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b3 95       	inc	r27
 a40:	d9 f7       	brne	.-10     	; 0xa38 <__fixunssfsi+0x42>
 a42:	3e f4       	brtc	.+14     	; 0xa52 <__fixunssfsi+0x5c>
 a44:	90 95       	com	r25
 a46:	80 95       	com	r24
 a48:	70 95       	com	r23
 a4a:	61 95       	neg	r22
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	08 95       	ret

00000a54 <__floatunsisf>:
 a54:	e8 94       	clt
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <__floatsisf+0x12>

00000a58 <__floatsisf>:
 a58:	97 fb       	bst	r25, 7
 a5a:	3e f4       	brtc	.+14     	; 0xa6a <__floatsisf+0x12>
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	99 23       	and	r25, r25
 a6c:	a9 f0       	breq	.+42     	; 0xa98 <__floatsisf+0x40>
 a6e:	f9 2f       	mov	r31, r25
 a70:	96 e9       	ldi	r25, 0x96	; 150
 a72:	bb 27       	eor	r27, r27
 a74:	93 95       	inc	r25
 a76:	f6 95       	lsr	r31
 a78:	87 95       	ror	r24
 a7a:	77 95       	ror	r23
 a7c:	67 95       	ror	r22
 a7e:	b7 95       	ror	r27
 a80:	f1 11       	cpse	r31, r1
 a82:	f8 cf       	rjmp	.-16     	; 0xa74 <__floatsisf+0x1c>
 a84:	fa f4       	brpl	.+62     	; 0xac4 <__floatsisf+0x6c>
 a86:	bb 0f       	add	r27, r27
 a88:	11 f4       	brne	.+4      	; 0xa8e <__floatsisf+0x36>
 a8a:	60 ff       	sbrs	r22, 0
 a8c:	1b c0       	rjmp	.+54     	; 0xac4 <__floatsisf+0x6c>
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	16 c0       	rjmp	.+44     	; 0xac4 <__floatsisf+0x6c>
 a98:	88 23       	and	r24, r24
 a9a:	11 f0       	breq	.+4      	; 0xaa0 <__floatsisf+0x48>
 a9c:	96 e9       	ldi	r25, 0x96	; 150
 a9e:	11 c0       	rjmp	.+34     	; 0xac2 <__floatsisf+0x6a>
 aa0:	77 23       	and	r23, r23
 aa2:	21 f0       	breq	.+8      	; 0xaac <__floatsisf+0x54>
 aa4:	9e e8       	ldi	r25, 0x8E	; 142
 aa6:	87 2f       	mov	r24, r23
 aa8:	76 2f       	mov	r23, r22
 aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__floatsisf+0x5e>
 aac:	66 23       	and	r22, r22
 aae:	71 f0       	breq	.+28     	; 0xacc <__floatsisf+0x74>
 ab0:	96 e8       	ldi	r25, 0x86	; 134
 ab2:	86 2f       	mov	r24, r22
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	2a f0       	brmi	.+10     	; 0xac4 <__floatsisf+0x6c>
 aba:	9a 95       	dec	r25
 abc:	66 0f       	add	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	da f7       	brpl	.-10     	; 0xaba <__floatsisf+0x62>
 ac4:	88 0f       	add	r24, r24
 ac6:	96 95       	lsr	r25
 ac8:	87 95       	ror	r24
 aca:	97 f9       	bld	r25, 7
 acc:	08 95       	ret

00000ace <__fp_inf>:
 ace:	97 f9       	bld	r25, 7
 ad0:	9f 67       	ori	r25, 0x7F	; 127
 ad2:	80 e8       	ldi	r24, 0x80	; 128
 ad4:	70 e0       	ldi	r23, 0x00	; 0
 ad6:	60 e0       	ldi	r22, 0x00	; 0
 ad8:	08 95       	ret

00000ada <__fp_nan>:
 ada:	9f ef       	ldi	r25, 0xFF	; 255
 adc:	80 ec       	ldi	r24, 0xC0	; 192
 ade:	08 95       	ret

00000ae0 <__fp_pscA>:
 ae0:	00 24       	eor	r0, r0
 ae2:	0a 94       	dec	r0
 ae4:	16 16       	cp	r1, r22
 ae6:	17 06       	cpc	r1, r23
 ae8:	18 06       	cpc	r1, r24
 aea:	09 06       	cpc	r0, r25
 aec:	08 95       	ret

00000aee <__fp_pscB>:
 aee:	00 24       	eor	r0, r0
 af0:	0a 94       	dec	r0
 af2:	12 16       	cp	r1, r18
 af4:	13 06       	cpc	r1, r19
 af6:	14 06       	cpc	r1, r20
 af8:	05 06       	cpc	r0, r21
 afa:	08 95       	ret

00000afc <__fp_round>:
 afc:	09 2e       	mov	r0, r25
 afe:	03 94       	inc	r0
 b00:	00 0c       	add	r0, r0
 b02:	11 f4       	brne	.+4      	; 0xb08 <__fp_round+0xc>
 b04:	88 23       	and	r24, r24
 b06:	52 f0       	brmi	.+20     	; 0xb1c <__fp_round+0x20>
 b08:	bb 0f       	add	r27, r27
 b0a:	40 f4       	brcc	.+16     	; 0xb1c <__fp_round+0x20>
 b0c:	bf 2b       	or	r27, r31
 b0e:	11 f4       	brne	.+4      	; 0xb14 <__fp_round+0x18>
 b10:	60 ff       	sbrs	r22, 0
 b12:	04 c0       	rjmp	.+8      	; 0xb1c <__fp_round+0x20>
 b14:	6f 5f       	subi	r22, 0xFF	; 255
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	8f 4f       	sbci	r24, 0xFF	; 255
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	08 95       	ret

00000b1e <__fp_split3>:
 b1e:	57 fd       	sbrc	r21, 7
 b20:	90 58       	subi	r25, 0x80	; 128
 b22:	44 0f       	add	r20, r20
 b24:	55 1f       	adc	r21, r21
 b26:	59 f0       	breq	.+22     	; 0xb3e <__fp_splitA+0x10>
 b28:	5f 3f       	cpi	r21, 0xFF	; 255
 b2a:	71 f0       	breq	.+28     	; 0xb48 <__fp_splitA+0x1a>
 b2c:	47 95       	ror	r20

00000b2e <__fp_splitA>:
 b2e:	88 0f       	add	r24, r24
 b30:	97 fb       	bst	r25, 7
 b32:	99 1f       	adc	r25, r25
 b34:	61 f0       	breq	.+24     	; 0xb4e <__fp_splitA+0x20>
 b36:	9f 3f       	cpi	r25, 0xFF	; 255
 b38:	79 f0       	breq	.+30     	; 0xb58 <__fp_splitA+0x2a>
 b3a:	87 95       	ror	r24
 b3c:	08 95       	ret
 b3e:	12 16       	cp	r1, r18
 b40:	13 06       	cpc	r1, r19
 b42:	14 06       	cpc	r1, r20
 b44:	55 1f       	adc	r21, r21
 b46:	f2 cf       	rjmp	.-28     	; 0xb2c <__fp_split3+0xe>
 b48:	46 95       	lsr	r20
 b4a:	f1 df       	rcall	.-30     	; 0xb2e <__fp_splitA>
 b4c:	08 c0       	rjmp	.+16     	; 0xb5e <__fp_splitA+0x30>
 b4e:	16 16       	cp	r1, r22
 b50:	17 06       	cpc	r1, r23
 b52:	18 06       	cpc	r1, r24
 b54:	99 1f       	adc	r25, r25
 b56:	f1 cf       	rjmp	.-30     	; 0xb3a <__fp_splitA+0xc>
 b58:	86 95       	lsr	r24
 b5a:	71 05       	cpc	r23, r1
 b5c:	61 05       	cpc	r22, r1
 b5e:	08 94       	sec
 b60:	08 95       	ret

00000b62 <__fp_zero>:
 b62:	e8 94       	clt

00000b64 <__fp_szero>:
 b64:	bb 27       	eor	r27, r27
 b66:	66 27       	eor	r22, r22
 b68:	77 27       	eor	r23, r23
 b6a:	cb 01       	movw	r24, r22
 b6c:	97 f9       	bld	r25, 7
 b6e:	08 95       	ret

00000b70 <__gesf2>:
 b70:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_cmp>
 b74:	08 f4       	brcc	.+2      	; 0xb78 <__gesf2+0x8>
 b76:	8f ef       	ldi	r24, 0xFF	; 255
 b78:	08 95       	ret

00000b7a <__mulsf3>:
 b7a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3x>
 b7e:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_round>
 b82:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscA>
 b86:	38 f0       	brcs	.+14     	; 0xb96 <__mulsf3+0x1c>
 b88:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscB>
 b8c:	20 f0       	brcs	.+8      	; 0xb96 <__mulsf3+0x1c>
 b8e:	95 23       	and	r25, r21
 b90:	11 f0       	breq	.+4      	; 0xb96 <__mulsf3+0x1c>
 b92:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
 b96:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_nan>
 b9a:	11 24       	eor	r1, r1
 b9c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>

00000ba0 <__mulsf3x>:
 ba0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_split3>
 ba4:	70 f3       	brcs	.-36     	; 0xb82 <__mulsf3+0x8>

00000ba6 <__mulsf3_pse>:
 ba6:	95 9f       	mul	r25, r21
 ba8:	c1 f3       	breq	.-16     	; 0xb9a <__mulsf3+0x20>
 baa:	95 0f       	add	r25, r21
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	55 1f       	adc	r21, r21
 bb0:	62 9f       	mul	r22, r18
 bb2:	f0 01       	movw	r30, r0
 bb4:	72 9f       	mul	r23, r18
 bb6:	bb 27       	eor	r27, r27
 bb8:	f0 0d       	add	r31, r0
 bba:	b1 1d       	adc	r27, r1
 bbc:	63 9f       	mul	r22, r19
 bbe:	aa 27       	eor	r26, r26
 bc0:	f0 0d       	add	r31, r0
 bc2:	b1 1d       	adc	r27, r1
 bc4:	aa 1f       	adc	r26, r26
 bc6:	64 9f       	mul	r22, r20
 bc8:	66 27       	eor	r22, r22
 bca:	b0 0d       	add	r27, r0
 bcc:	a1 1d       	adc	r26, r1
 bce:	66 1f       	adc	r22, r22
 bd0:	82 9f       	mul	r24, r18
 bd2:	22 27       	eor	r18, r18
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	62 1f       	adc	r22, r18
 bda:	73 9f       	mul	r23, r19
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	62 1f       	adc	r22, r18
 be2:	83 9f       	mul	r24, r19
 be4:	a0 0d       	add	r26, r0
 be6:	61 1d       	adc	r22, r1
 be8:	22 1f       	adc	r18, r18
 bea:	74 9f       	mul	r23, r20
 bec:	33 27       	eor	r19, r19
 bee:	a0 0d       	add	r26, r0
 bf0:	61 1d       	adc	r22, r1
 bf2:	23 1f       	adc	r18, r19
 bf4:	84 9f       	mul	r24, r20
 bf6:	60 0d       	add	r22, r0
 bf8:	21 1d       	adc	r18, r1
 bfa:	82 2f       	mov	r24, r18
 bfc:	76 2f       	mov	r23, r22
 bfe:	6a 2f       	mov	r22, r26
 c00:	11 24       	eor	r1, r1
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	9a f0       	brmi	.+38     	; 0xc2e <__mulsf3_pse+0x88>
 c08:	f1 f0       	breq	.+60     	; 0xc46 <__mulsf3_pse+0xa0>
 c0a:	88 23       	and	r24, r24
 c0c:	4a f0       	brmi	.+18     	; 0xc20 <__mulsf3_pse+0x7a>
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	bb 1f       	adc	r27, r27
 c14:	66 1f       	adc	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	91 50       	subi	r25, 0x01	; 1
 c1c:	50 40       	sbci	r21, 0x00	; 0
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__mulsf3_pse+0x64>
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	51 05       	cpc	r21, r1
 c24:	80 f0       	brcs	.+32     	; 0xc46 <__mulsf3_pse+0xa0>
 c26:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_inf>
 c2a:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_szero>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	e4 f3       	brlt	.-8      	; 0xc2a <__mulsf3_pse+0x84>
 c32:	98 3e       	cpi	r25, 0xE8	; 232
 c34:	d4 f3       	brlt	.-12     	; 0xc2a <__mulsf3_pse+0x84>
 c36:	86 95       	lsr	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f7 95       	ror	r31
 c40:	e7 95       	ror	r30
 c42:	9f 5f       	subi	r25, 0xFF	; 255
 c44:	c1 f7       	brne	.-16     	; 0xc36 <__mulsf3_pse+0x90>
 c46:	fe 2b       	or	r31, r30
 c48:	88 0f       	add	r24, r24
 c4a:	91 1d       	adc	r25, r1
 c4c:	96 95       	lsr	r25
 c4e:	87 95       	ror	r24
 c50:	97 f9       	bld	r25, 7
 c52:	08 95       	ret

00000c54 <__fp_cmp>:
 c54:	99 0f       	add	r25, r25
 c56:	00 08       	sbc	r0, r0
 c58:	55 0f       	add	r21, r21
 c5a:	aa 0b       	sbc	r26, r26
 c5c:	e0 e8       	ldi	r30, 0x80	; 128
 c5e:	fe ef       	ldi	r31, 0xFE	; 254
 c60:	16 16       	cp	r1, r22
 c62:	17 06       	cpc	r1, r23
 c64:	e8 07       	cpc	r30, r24
 c66:	f9 07       	cpc	r31, r25
 c68:	c0 f0       	brcs	.+48     	; 0xc9a <__fp_cmp+0x46>
 c6a:	12 16       	cp	r1, r18
 c6c:	13 06       	cpc	r1, r19
 c6e:	e4 07       	cpc	r30, r20
 c70:	f5 07       	cpc	r31, r21
 c72:	98 f0       	brcs	.+38     	; 0xc9a <__fp_cmp+0x46>
 c74:	62 1b       	sub	r22, r18
 c76:	73 0b       	sbc	r23, r19
 c78:	84 0b       	sbc	r24, r20
 c7a:	95 0b       	sbc	r25, r21
 c7c:	39 f4       	brne	.+14     	; 0xc8c <__fp_cmp+0x38>
 c7e:	0a 26       	eor	r0, r26
 c80:	61 f0       	breq	.+24     	; 0xc9a <__fp_cmp+0x46>
 c82:	23 2b       	or	r18, r19
 c84:	24 2b       	or	r18, r20
 c86:	25 2b       	or	r18, r21
 c88:	21 f4       	brne	.+8      	; 0xc92 <__fp_cmp+0x3e>
 c8a:	08 95       	ret
 c8c:	0a 26       	eor	r0, r26
 c8e:	09 f4       	brne	.+2      	; 0xc92 <__fp_cmp+0x3e>
 c90:	a1 40       	sbci	r26, 0x01	; 1
 c92:	a6 95       	lsr	r26
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	81 1d       	adc	r24, r1
 c98:	81 1d       	adc	r24, r1
 c9a:	08 95       	ret

00000c9c <__umulhisi3>:
 c9c:	a2 9f       	mul	r26, r18
 c9e:	b0 01       	movw	r22, r0
 ca0:	b3 9f       	mul	r27, r19
 ca2:	c0 01       	movw	r24, r0
 ca4:	a3 9f       	mul	r26, r19
 ca6:	70 0d       	add	r23, r0
 ca8:	81 1d       	adc	r24, r1
 caa:	11 24       	eor	r1, r1
 cac:	91 1d       	adc	r25, r1
 cae:	b2 9f       	mul	r27, r18
 cb0:	70 0d       	add	r23, r0
 cb2:	81 1d       	adc	r24, r1
 cb4:	11 24       	eor	r1, r1
 cb6:	91 1d       	adc	r25, r1
 cb8:	08 95       	ret

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
